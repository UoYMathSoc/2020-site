// Code generated by sqlc. DO NOT EDIT.
// source: events.sql

package database

import (
	"context"
)

const getEvent = `-- name: GetEvent :one
SELECT id, name, start_time, end_time, location, description
FROM events
WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.Description,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, start_time, end_time, location, description
FROM events
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
