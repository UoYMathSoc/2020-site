// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, name)
VALUES ($1, $1)
RETURNING id
`

func (q *Queries) CreateUser(ctx context.Context, username string) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, username)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findUserUsername = `-- name: FindUserUsername :one
SELECT id
FROM users
WHERE username LIKE $1
`

func (q *Queries) FindUserUsername(ctx context.Context, username string) (int32, error) {
	row := q.db.QueryRowContext(ctx, findUserUsername, username)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: Get :one
SELECT id, username, name, bio
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Bio,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, name, bio
FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users
SET name = $2
WHERE id = $1
`

type UpdateUserNameParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserName, arg.ID, arg.Name)
	return err
}

const updateUserUsername = `-- name: UpdateUserUsername :exec
UPDATE users
SET username = $2
WHERE id = $1
`

type UpdateUserUsernameParams struct {
	ID       int32
	Username string
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserUsername, arg.ID, arg.Username)
	return err
}
